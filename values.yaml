namespace:
  name: secure-k8s-tenant

serviceAccount:
  name: secure-k8s-sa
  iamRoleArn: "arn:aws:iam::123456789012:role/MyK8sServiceAccountRole" # IRSA IAM Role
  automountServiceAccountToken: false

tenant: "tenant-A"

deployment:
  name: secure-k8s-deployment
  replicas: 1
  image:
    repository: "nginxinc/nginx-unprivileged@sha256:cc017c7baef3899d3cf0100571881c759c2721fb76bf027071d065d6440bd4cf"
    pullPolicy: Always
  containerPort: 8080
  resources:
    requests:
      cpu: "250m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "256Mi"
  securityContext:
    seccompProfile:
      type: RuntimeDefault
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 11000
  runAsGroup: 11000
  fsGroup: 2000

networkPolicy:
  enabled: true
  allowService: true
  serviceCidrs:
    - "192.168.100.0/24"
    - "192.168.101.0/24"
    - "192.168.102.0/24"
  allowIngress: true

ingress:
  enabled: true
  host: my-app.example.com
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance

service:
  enabled: true
  type: LoadBalancer
  externalPort: 80
  internalPort: 8080
